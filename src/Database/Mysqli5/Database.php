<?php

/**
 *
 * Part of the QCubed PHP framework.
 *
 * @license MIT
 *
 */

namespace QCubed\Database\Mysqli5;


// New MySQL 5 constants not yet in PHP (as of PHP 5.1.2)
use QCubed\Exception\Caller;

if (!defined('MYSQLI_TYPE_NEWDECIMAL')) {
    define('MYSQLI_TYPE_NEWDECIMAL', 246);
}
if (!defined('MYSQLI_TYPE_BIT')) {
    define('MYSQLI_TYPE_BIT', 16);
}


/**
 * Class Database
 * @package QCubed\Database\Mysqli5
 */
class Database extends MysqliDatabase
{
    const ADAPTER = 'MySql Improved Database Adapter for MySQL 5';

    /**
     * Retrieves a list of all table names from the current database, excluding views.
     *
     * @return string[] Array of table names in the database.
     * @throws Caller
     * @throws MysqliException
     */
    public function getTables(): array
    {
        // Connect if Applicable
        if (!$this->blnConnectedFlag) {
            $this->connect();
        }

        // Use the MySQL5 Information Schema to get a list of all the tables in this database
        // (excluding views, etc.)
        $strDatabaseName = $this->Database;

        $objResult = $this->query("
			SELECT
				table_name
			FROM
				information_schema.tables
			WHERE
				table_type <> 'VIEW' AND
				table_schema = '$strDatabaseName';
		");

        $strToReturn = array();
        while ($strRowArray = $objResult->fetchRow()) {
            $strToReturn[] = $strRowArray[0];
        }
        return $strToReturn;
    }

    /**
     * Executes an SQL query and returns the resulting data as a Result object.
     * Throws exceptions for errors or invalid use cases.
     *
     * @param string $strQuery The SQL query to execute.
     * @return Result The query result encapsulated in a Result object.
     * @throws MysqliException If there is an error executing the query.
     * @throws Caller If the query does not return a result set.
     */
    protected function executeQuery(string $strQuery): MysqliResult
    {
        // Perform the Query
        $objResult = $this->objMySqli->query($strQuery);
        if ($this->objMySqli->error) {
            throw new MysqliException($this->objMySqli->error, $this->objMySqli->errno, $strQuery);
        }

        if (is_bool($objResult)) {
            throw new Caller ("Use ExecuteNonQuery when no results are expected from a query.");
        }

        // Return the Result
        return new Result($objResult, $this);
    }

    /**
     * Executes a multi-query SQL statement and returns the resulting sets of results.
     *
     * @param string $strQuery The SQL query to be executed, potentially containing multiple statements separated by semicolons.
     * @return array An array containing the result sets generated by the multi-query execution.
     * @throws Caller
     * @throws MysqliException If an error occurs while executing the query or retrieving results.
     */
    public function multiQuery(string $strQuery): array
    {
        // Connect if Applicable
        if (!$this->blnConnectedFlag) {
            $this->connect();
        }

        // Perform the Query
        $this->objMySqli->multi_query($strQuery);
        if ($this->objMySqli->error) {
            throw new MysqliException($this->objMySqli->error, $this->objMySqli->errno, $strQuery);
        }

        $objResultSets = array();
        do {
            if ($objResult = $this->objMySqli->store_result()) {
                $objResultSets[] = new Result($objResult, $this);
            }
        } while ($this->objMySqli->more_results() && $this->objMySqli->next_result());

        return $objResultSets;
    }

    /**
     * Executes a stored procedure with the given name and parameters.
     *
     * @param string $strProcName The name of the stored procedure to be executed.
     * @param array|null $params Optional parameters to be passed to the stored procedure.
     * @return mixed The result of executing the stored procedure, typically a result set or status.
     * @throws Caller
     * @throws MysqliException
     */
    public function executeProcedure(string $strProcName, ?array $params = null): null
    {
        $strParams = '';
        if ($params) {
            $a = array_map(function ($val) {
                return $this->sqlVariable($val);
            }, $params);
            $strParams = implode(',', $a);
        }
        $strSql = "call {$strProcName}({$strParams})";
        return $this->multiQuery($strSql);
    }

}